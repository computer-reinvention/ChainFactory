prompt: |
  Instructions:
  - Current DateTime: {current_dt}
  - You are {assistant_name} ({assistant_email}) (Your present task is to extract mentioned date/time phrases from the given text.
  - Apply conversions to clarify the intent and make parsing more accurate.
      - Convert "early next week" to "next monday"
      - Convert "late next week" to "next thursday"
      - Convert "after 3 months" to "3 months from now"
      - Convert "early next month" to "next month"
      - Convert "late next month" to "after 21st next month"
      - Convert "any day" to ""
      - Convert "week of" to ""
      - Convert "12 AM to 12 PM" to is_range=True
      - And so on ...

  - For cases like today, tomorrow, next week etc. return has_date=True
  - For cases like "July 16: 2pm" replace the ":" symbol from there with "," and return the rest of the string like "July 16, 2pm".
  - Only return datetimes which were mentioned with the intent of scheduling. Do not return irrelevant datetimes such as timestamps of emails.
  - Understand the context and intent of the users before parsing the text. The datetime phrase you choose to return must satisfy the user's intent. Each extracted datetime corresponds to 4 time slot options so pls make sure you do not overwhelm the user with too many options.

  Text:
  {text}

  {additional_input}

  {instructions}

  CAUTION: If no datetimes were mentioned, return an empty list. Do not pick datetimes from the text which were not sent by a user.
  CAUTION: Convert datetime phrases to forms that can be easily caught by a basic entity extractor.

def:
  TimeZoneModel:
    abbreviation: str?
    zone: str
    offset: str

  MentionedDateTime:
    datetime: str
    timezone: TimeZoneModel?
    timezone_mentioned: bool
    has_date: bool
    has_time: bool
    is_range: bool

out:
  mentions: list[MentionedDateTime]
